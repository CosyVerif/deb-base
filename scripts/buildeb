#!/bin/bash
#How To Use This Script
#----------------------

#The purpose of this script is to help you create Debian packages. As you may 
#know there are differents types of packages. This script allows you to create 
#three type of packages. The first one is the binary package which contains
#binary files. The second one is the library package. When you want to build 
#a library package, two packages are actually created. Here is a quick
#description of those : 
#1. `<package_name>_<version>.deb` : This is the package that will contain
#the libraries.
#2. `<package_name>-dev_<version>.deb` : This package will contain the
#header files.
#The last type of package that this script can help you build is the 
#architecture independent package. This type of package doesn't depend on any
#architecture. It's this type of package you should use if you want to build a
#package containing configuration files, text files, scripts, or things that
#aren't architecture dependent.

#In order for this script to work correctly, some other scripts and files are 
#needed. Thoses files can be found in the same git repository where you've found
#this one. If you've obtained this script via the Debian package, then all those
#files are located in `/usr/share/buildeb/`, and you shouldn't really worry
#about it. Here is a list of the files that we need, and what they're used for :
#1. `build_config.yml` : This file contains all the informations this script
#need to build the Debian packages you want. <span class='gras'>You must
#read it, and fill it with correct informations.</span> For example,
#this is were you have to indicate what name you want your package(s) to have,
#and other things like that. If you've installed the debian package containing
#it, then you might want to know that this file is located in 
#`/usr/share/buildeb`. But this script can generate a template for this file
#if you use the `-g` option.
#2. config_parser.pl : This perl script parses the configuration file (see 
#above), and produces an output that look something like "export NAME=VALUE;".
#If you've not obtained this file via the Debian Package, then this file must
#be in the same directory where you will launch the script.
#3. correct_lintian.pl : Perl script that correct some of the mistakes that
#lintian (command that check the conformity of packages) detects. Although this
#script is not necessary to produce a package, it's highly recommended
#to have it, in order to build a package that complies with the Debian Policy.
#If you've not obtained this files via the Debian Package, then this file must
#be in the same directory where you will launch the script.
#4. Your project needs a makefile if you want to build packages. Debian
#tools need one to build your project.

#If you've obtained this script via the Debian package, then you should
#know that the configuration file you need to fill is located in 
#`/usr/share/buildeb/`. You should copy it where your source code is. This is 
#not mandatory though, since you can specify where this file is located when 
#you launch this script. You can also create one using the `-g` option.
#If you want to know more about the options you can specify in the command line
#of this script, please read the <a href='#opts'>`Parsing command line options`
#</a> paragraph

#How this script works
#---------------------

#Here are the main steps of the script :
#1. <a href='#opts'>Parsing command line options</a>
#2. <a href='#conf'>Reading the configuration file</a>
#3. <a href='#makefile'>Looking for the Makefile</a>
#4. <a href='#log'>Creating logs</a>
#5. <a href='#beforebuild'>Running before build operations</a>
#6. <a href='#tarball'>Creating Tarballs</a>
#7. <a href='#copyright'>The copyright file</a>
#8. <a href='#lib'>Building the packages</a>
#  1. <a href='#libdeb'>Creation of the Debian files</a>
#  2. <a href='#libmod'>Modification of the Debian files</a>
#  3. <a href='#libsource'>Creation of the source package</a>
#  4. <a href='#libbuild'> Building the package</a>
#9. <a href='#afterbuild'>Running After build operations</a>

#<a id='opts'>Parsing command line options.</a>
#----------------------------------------------

#In this part of the script, we are parsing the arguments given to the script.
#Here is the list of the options you can use when you call this script : 
#- `-h` : If you want a help to be displayed.
#- `-g` : If you want to generate a configuration file template.
#- `-l` : Use that if you want to keep all the files generated during the build
#of the package. 
#Those files includes : 
#  - The tarballs (i.e. the archives that contains your source code)
#  - The debian directory, that is created during the build of the package. It
#contains the configuration files used by the program which will create the 
#package. 
#  - `<package_name>_<version>-1.debian.tar.gz`, which is an archive containing
#the debian directory, with the modified debian configuration files.
#  - .build files, which are actually logs of what debuild (the tool that
#builds the packages) prints in the standart output.
#- `-c <configuration_file>` : This option allows you to indicate the path
#leading to your configuration file. The path MUST be relative to where you
#launch this script. This option is not mandatory. If you don't use it, 
#then we will assume that the configuration file is in the current directory
#(i.e. the directory where you launch this script.). We will also assume that 
#its name is `build_config.yml`. If it's not, then you should use this option.
#- `-d <makefile_directory>` : This option allows you to indicate in which
#directory the makefile of your project is located. You can omit this option, if
#the makefile is in the directory where you'll launch this script.
#-  `-t` : This option allows you to stop the building process just before
#we call `debuild` to build the packages. The files that have been created and
#modifed aren't removed. This way, you can edit the files as you wish, and
#continue the build on your own.
#-  `-v` : Verbose mode. Without this option, everything that would normally be 
#printed on the standard output will go into a log.

leaveunclean=0
quitbeforebuild=0
verbosemode=0
while getopts "c:d:lgthVD" opt; do
    case $opt in
	h)
	    cat <<EOF
Usage: `basename $0` [OPTIONS]
Helps you create Debian packages.
If you've not obtained this script via the debian package then the files 
config_parser.pl and correct_lintian.pl must be in the same directory where
you'll execute this script.
Make sure build_config.yml is correctly filled.

Options :
  -l                 Don't clean files created during the build of the packages.
  -c <config_file>   Allows you to indicate where your configuration file is 
                      located. If you omit this option we will assume that it's 
                      located in the directory where you've lauched this script 
                      and its name is build_config.yml
  -d <makefile_dir>  Path leading to the directory where your makefile is. If 
                      you omit this option, then we will assume that the 
                      makefile is located in the directory where you will 
                      execute this script.
  -g                 Generate a configuration file template.
  -t                 Stops the script before building the packages. You can edit
                      files in the debian directory located where your Makefile
                      is. 
  -V                 Verbose mode.
  -D                 Debug mode.
  -h                 Print this help.
EOF
	    exit 0;;
	l)
	    leaveunclean=1;;
	c) 
	    CONFIGFILE="$OPTARG";;
	d)
	    MAKEFILEDIR="$OPTARG";;
	g)
	    if [ -f "/usr/share/buildeb/build_config.yml" ]; then
		cp /usr/share/buildeb/build_config.yml .
		echo "build_config.yml successfully generated !"
		exit 0;
	    else
		echo "Couldn't find build_config.yml in /usr/share/buildeb"
		exit 1;
	    fi
	    ;;
	t)
	    quitbeforebuild=1;
	    leaveunclean=1;;
	V)
	    verbosemode=1;;
	D)
	    set -x;;
	\?)
	    echo "Usage: `basename $0` [OPTIONS]">&2;
	    echo "Use `basename $0` -h for more information">&2;
	    exit 2;;
    esac
done
shift $(( $OPTIND - 1 ))

#<a id='conf'>Reading configuration file.</a>
#--------------------------------------------

#In order for this script to run correctly, you need to complete the file 
#normally named '_build\_config.yml_'. You can rename it if you want, but in 
#that case you have to use the -c option.This file defines a certain number of 
#variable (like the name of the packages, the type of packages you want to build
#, and other things ...) that this script will then use to build the packages 
#the user wants. <span class='gras'>Unless you've used the -c option, the 
#configuration file must be located in the same directory where this script 
#will be launched. </span>
 
#So, firstly, we check if the user has used the -c option. If that is not the 
#case (i.e. the variable CONFIGFILE is empty), then we will assume that the
#name of the configuration file is `build_config.yml`, and that it is located
#in the directory where the script has been launched.

if [ -z "$CONFIGFILE" ]
then
    CONFIGFILE="build_config.yml";
fi

#Now, we're checking if CONFIGFILE leads to an existing file. If it's not, then
#we stop the script, because we need the informations in this file in order
#to build the packages

if [ ! -f "$CONFIGFILE" ] 
then
    echo "build_config.yml is missing" >&2
    exit 3;
else
    echo "Configuration file `basename $CONFIGFILE` found !"
fi

#Now, we're looking for the script config_parser.pl, that will read the 
#configuration file and produce an output like : "export NAME=VALUE", which can
#be evaluated by the shell interpreter. This file can be located in two places.
#It can either be in the current directory or in /usr/share/buildeb (which is
#normally the case if the user has install the buildeb package).

if [ ! -f "config_parser.pl" ] && \
    [ ! -f "/usr/share/buildeb/config_parser" ] 
then
    echo "config_parser.pl is missing" >&2
    exit 4;
else
    echo "config_parser.pl found !"
    if [ -f "config_parser.pl" ]
    then
	PARSER=`readlink -f ./config_parser.pl`
    else
	PARSER="/usr/share/buildeb/config_parser";
    fi
fi

#Now we're looking for the script correct_lintian.pl that will correct common
#mistakes that might be found in the debian files. We won't quit if the file is 
#missing because it is not essential to correct those mistakes when building a 
#package.

if [ ! -f "correct_lintian.pl" ] && \
    [ ! -f "/usr/share/buildeb/correct_lintian" ] 
then
    echo "correct_lintian.pl is missing ! You should install the buildeb \
package or get this script to ensure you are building nice Debian packages." >&2
else
    echo "correct_lintian.pl found !"
    if [ -f "correct_lintian.pl" ]
    then
	LINTIAN=`readlink -f ./correct_lintian.pl`
    else
	LINTIAN="/usr/share/buildeb/correct_lintian"
    fi
fi

#Now, we're checking if the user has used the option -d, in order to indicate
#the path to the directory that contains the makefile. If he hasn't, then we
#we use the current directory as the makefile directory. If the user has 
#specified an inexistant directory, then we exit the script with an error

if [ -z "$MAKEFILEDIR" ]
then
    MAKEFILEDIR=`pwd`
else
    if [ ! -d "$MAKEFILEDIR" ]
    then 
	echo "$MAKEFILEDIR is not a directory" >&2
	exit 5;
    fi
fi

#Then, we parse the configuration file. This is done by the perl script 
#`config_parser.pl`. This script must be in the same directory as this
#script if you've not installed the debian package containing it. This
#script needs two arguments : the path leading to the configuration file, and
#the path leading to the directory where the makefile is located. 
#`config_parser.pl` reads the configuration file, and produces an
#output that looks like that : `export NAME=VALUE;`. This script checks if the
#user has made mistakes when he was filling it (for example, it checks if 
#the field PACKAGETYPE is filled and if it contains a correct value). 
#So, we have to check if the script has terminated successfully before 
#continuing. If it hasn't, we print an error message and quit the script 
#immediatly.

vars=`$PARSER $CONFIGFILE $MAKEFILEDIR`;
res=$?;
case $res in
    "0") eval "$vars"; echo "build_config.yml successfully scanned !";;
    "1") echo "Incorrect call to config_parser" >&2; exit 6;;
    "2") echo "Error in build_config.yml : PACKAGETYPE is empty" >&2 ; exit 7;;
    "3") echo "Error in build_config.yml : Unknown type of package">&2 ;exit 7;;
    "4") echo "Error in build_config.yml : BINPACKAGENAME is empty">&2 ;exit 7;;
    "5") echo "Error in build_config.yml : LIBPACKAGENAME is empty">&2 ;exit 7;;
    "6") echo "Error in build_config.yml : INDPACKAGENAME is empty">&2; exit 7;;
    "7") echo "Error in build_config.yml : COPYRIGHT variable doesn't contain \
a path that lead to an existing file">&2 ;exit 7;;
    "8") echo "Error in build_config.yml : DEVS is empty (and it shouldn't \
because COPYRIGHT isn't a file and there's no AUTHORS file)" >&2 ; exit 7;;
    "9") echo "Error in build_config.yml : BINARYNAMES is empty">&2; exit 7;;
    "10") echo "Error in build_config.yml : LIBNAMES and HEADERNAMES are \
empty">&2;exit 7;;
    "11") echo "Error in build_config.yml : INDNAMES is empty">&2; exit 7;;
    *) echo "Unknown error while parsing configuration file">&2;exit 8;;
esac

#<a id='makefile'>Looking for the Makefile</a>
#---------------------------------------------

#Here, we are checking the presence of a Makefile.
#If there is no Makefile, the script quits immediatly.
#Debian tools need that in order to build your program.

CURR=`pwd`;
cd $MAKEFILEDIR;
MAKEFILEDIR=`pwd`;
if [ ! -f Makefile ] 
then
    echo "Makefile is missing" >&2
    exit 9;
else
    echo "Makefile found in $MAKEFILEDIR."
fi

#<a id='log'>Creating logs</a>
#----------------------------

#We create two logfiles in order to help you understand what happened during the
#build of the packages. The first one is named `buildeb.log`, and it contains
#just enough to know if the build worked, or not. The second one is named 
#`buildeb_full.log`, and it contains everything that is normally printed on
#the standard output by the commands we use. Those two files are located
#in the parent directory of the one that contains the makefile.  

LOGDIR=`readlink -f $MAKEFILEDIR/..`
LOGFILE=$LOGDIR/buildeb.log
FULLLOGFILE=$LOGDIR/buildeb_full.log

:> $LOGFILE
:> $FULLLOGFILE

#This function writes what it receive on its standard input in the logfile (if
#the user hasn't used the verbose mode) or in both the standard output and the 
#logfile (if the user used the verbose mode).

log() {
    if [[ $verbosemode -eq 1 ]]; then
	tee -a $FULLLOGFILE
    else
	cat >> $FULLLOGFILE
    fi
}

env echo -e "This log was generated by buildeb while building a \n\
debian package from the sources in $MAKEFILEDIR for `arch`" | tee -a $LOGFILE \
 $FULLLOGFILE
timestamp=`date -R`
env echo -e "Timestamp :     $timestamp\n" | tee -a $LOGFILE $FULLLOGFILE

#<a id='beforebuild'>Running before build operations</a>
#-------------------------------------------------------

#We execute commands specified in the configuration file in `BEFOREBUILD` 
#before doing anything build-related and get the version number with the
#current timestamp if necessary.

if [ -z "$VERSION" ]; then
    VERSION=`date +%s`
    echo "Version not specified. We will use the current timestamp : $VERSION"\
 | tee -a $LOGFILE $FULLLOGFILE
fi

echo "Executing before build commands..." | tee -a $LOGFILE $FULLLOGFILE
cd $MAKEFILEDIR
IFS=';' read -a commands <<< "$BEFOREBUILD"
for cmd in "${commands[@]}"
do
    echo " > $cmd" | tee -a $LOGFILE $FULLLOGFILE
    eval "$cmd" | log
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
	cmdname=`echo $cmd | cut -d' ' -f1 $cmd`
	echo $cmdname exited with a ${PIPESTATUS[0]} status
	exit 10
    fi
done
echo "Before build commands executed." | tee -a $LOGFILE $FULLLOGFILE

#<a id='tarball'>Creating Tarballs</a>
#--------------------------------------

#We check if the user wants to build a library package by looking 
#at the PACKAGETYPE variable. If there is a "l" in this string, it means that 
#the user want to build a library package. To do so, we have to create an 
#adequately named tarball. In order to be adequatly named, a tarball must 
#have a name that matches the following pattern : 
#&lt;package\_name&gt;\_&lt;version&gt;.orig.tar.gz.

#<span class='gras'>N.B. :</span> package\_name must be the name of the 
#library package you want to build.

#In the same way, if there is a "s" in PACKAGETYPE, it means that we 
#have to create a binary package. We must also create a tarball that is named
#adequately (i.e. it must follow the previous pattern).

LIBPACK=false
BINPACK=false
INDPACK=false
for var in $PACKAGETYPE; do
    if [ $var = "l" ]
    then
	LIBPACK=true
	echo "Building library packages." | tee -a $LOGFILE $FULLLOGFILE
    fi
    if [ $var = "s" ]
    then
	BINPACK=true
	echo "Building binary package." | tee -a $LOGFILE $FULLLOGFILE
    fi
    if [ $var = "i" ]
    then
	INDPACK=true
	echo "Building architecture independant package." | tee -a \
$LOGFILE $FULLLOGFILE
    fi
done

if [ $LIBPACK == true ]
then
    TARBALL="$LIBPACKAGENAME""_$VERSION.orig.tar.gz"
    PACKNAME="$LIBPACKAGENAME""_$VERSION"
elif [ $BINPACK == true ]
then
    TARBALL="$BINPACKAGENAME""_$VERSION.orig.tar.gz"
    PACKNAME="$BINPACKAGENAME""_$VERSION"
elif [ $INDPACK == true ]
then
    TARBALL="$INDPACKAGENAME""_$VERSION.orig.tar.gz"
    PACKNAME="$INDPACKAGENAME""_$VERSION"
fi
tar czf "../$TARBALL" . | log
echo "Tarball $TARBALL created." | log
    

#<a id='copyright'>The copyright file</a>
#----------------------------------------

#The Debian Policy tells us that there need to be a file named '_copyright_'
#in the debian directory. Although this is not mandatory, it's recommended to
#do so, if you want your package to be compliant with the Debian Policy. There's
#a variable concerning this in the configuration file.

#In this part of the script, we check if the variable COPYRIGHT is empty, a file
#the user wants to include or a predefined value.
 
if [ "$COPYRIGHT" = "gpl" ] || [ "$COPYRIGHT" = "gpl2" ] \
    || [ "$COPYRIGHT" = "gpl3" ] || [ "$COPYRIGHT" = "lgpl" ] \
    || [ "$COPYRIGHT" = "lgpl2" ] || [ "$COPYRIGHT" = "lgpl3" ] \
    || [ "$COPYRIGHT" = "artistic" ] || [ "$COPYRIGHT" = "apache" ] \
    || [ "$COPYRIGHT" = "bsd" ] || [ "$COPYRIGHT" = "mit" ]
then
    COPYRIGHTTYPE=predefined;
    echo "Using a predefined $COPYRIGHT copyright." | tee -a $LOGFILE \
	$FULLLOGFILE
elif [ -f "$COPYRIGHT" ]
then
    COPYRIGHTTYPE=file;
    echo "Using a file copyright located in $COPYRIGHT." | tee -a $LOGFILE \
	$FULLLOGFILE
else
    COPYRIGHTTYPE=empty;
    echo "Using an empty copyright file." | tee -a $LOGFILE $FULLLOGFILE
fi

#<a id='lib'>Building the packages</a>
#----------------------------------------------

#This is the part of the script where we're going to build the packages that the
#user want. 

#<a id='libdeb'>Creation of the Debian files</a>
#-----------------------------------------------

#In order to build packages, debuild (the utilitary that will create the 
#package) needs some files that must be put in a directory 
#named _debian_, in the directory that contains the makefile that allows us to
#build your program.

#The files that debuild needs can be created automatically by the command 
#dh_make. We call dh_make with those options :
#1. `-l` or `-s` or `-i` : It means that we want to create a certain type of
#package. Here is the meaning of each one of those options :
#  1. `-l` : It means we're going to create library packages (one containing
#libraries, and one containing headers). If it happens that the user wants
#to build library packages and a binary package, then we use that option
#because the files generated by that option need less modification than the ones
#generated by the `-s` option.
#  2. `-s` : This tells dh-make that we're going to build a binary package.
#  3. `-i` : This is the option we use for packages that don't depend on the
#architecture of your computer. You can put scripts, images, and a lot of things
#that don't depend on the architecture of your computer in this type package.
#2. -c : It tells dh_make we want a pre-filled copyright file (We use that if 
#the user has filled the field COPYRIGHT of the configuration file with one
#of the following value : `gpl`, `gpl2`, `gpl3`, `lgpl`, `lgpl2`, `lgpl3`, 
#`artistic`, `apache`, `bsd`, `mit`).
#3. -p : Forces the package name to be what is after that option. It's quite
#usefull because dh_make normally checks if the source code directory is named
#according to the following pattern : `<packagename>-<version>`. 
#This option allows you to name your directory whatever name you want.

echo "Creation of debian files" | tee -a $LOGFILE $FULLLOGFILE

#First we have to remove the debian directory, because if there is one,
#dh_make will not make any changes, and that's not what we want.

rm -rf debian/ | log

#We create a temporary file that only contains a blank line. We do that because
#dh_make waits an input from the user. We know that there's a -y option that
#tells dh_make not to ask for the user confirmation. However, that option is not
#available on every dh_make version, so we've made the choice to do it that way.

env echo -e -n "\n" > debtmpfile

#We use the -c option of dh_make if the user specified that the copyright file
#must be generated by dh_make. You shouldn't really do that because the
#copright files that are generated by dh_make needs to be filled with
#correct information

if [ "$COPYRIGHTTYPE" = "predefined" ]
then
copy="-c $COPYRIGHT"
fi
if [ $LIBPACK == true ]
then
    dh_make -l $copy -p $PACKNAME < debtmpfile | log
elif [ $BINPACK == true ]
then
    dh_make -s $copy -p $PACKNAME < debtmpfile | log
elif [ $INDPACK == true ]
then
    dh_make -i $copy -p $PACKNAME < debtmpfile | log
fi
if [ ${PIPESTATUS[0]} -ne 0 ]; then
    echo "dh_make failed. Check your version number and your package name" >&2
    exit 11
fi

#If the user has written a copyright file, we copy it in the debian directory

if [ "$COPYRIGHTTYPE" = "file" ] 
then
    cp $COPYRIGHT debian/copyright | log
fi

#We then remove the temporary file we have created.

rm -f debtmpfile | log

echo "Template files generated by dh_make." | tee -a $LOGFILE $FULLLOGFILE

#<a id='libmod'>Modification of the debian files</a>
#----------------------------------------------------

#dh\_make creates the debian directory, and all the files in it. Therefore, we
#must modify some of them, because some of them are not complete.
    
#Some of the files generated by dh_make are just examples of what you should 
#provide. This is not interesting to us, therefore we have to suppress them.

rm -rf debian/*.EX debian/*.ex debian/README* | log

#We edit the changelog file to to put a good distribution and remove the bug
#tracking log (except if -t option supplied).

if [ -n $DISTRIBUTION ]; then
    awk -v d=$DISTRIBUTION '{ if ($0 ~ /.+unstable.+/) gsub(/unstable/,d,$0); print $0 }' debian/changelog > debian/changelog.tmp
    mv debian/changelog.tmp debian/changelog
fi

if [ $quitbeforebuild -ne 1 ]; then
    awk '{ if ($0 ~ /\* Initial release/) print "  * Initial release"; else print $0; }' debian/changelog > debian/changelog.tmp
    mv debian/changelog.tmp debian/changelog
fi

#We then have to rename the dirs files and the install files that have been
#created by dh\_make. .dirs files tells _debuild_ what are the directories
#that must created in the package(s). .install files tells the _debuild_ 
#command what files must be put in the package(s). You can create up to one
#.dirs file and one .install file for each package you want to build.
#If the user wants to build library packages, we need to rename those files 
#because the generated files are named according to these patterns :
#`<packagename>1.dirs` and `<packagename>1.install`. This is not 
#correct, because those files must be named after the package name. Thus, 
#we must rename them according to the following pattern : 
#`<packagename>.dirs` and `<packagename>.install`.

if [ $LIBPACK == true ]
then
    mv debian/"$LIBPACKAGENAME"1.dirs debian/"$LIBPACKAGENAME".dirs | log
    mv debian/"$LIBPACKAGENAME"1.install debian/"$LIBPACKAGENAME".install | log
fi

#If we're building library packages, we must modify the control file because
#in the control file, the name of the package is `<packagename>BROKEN`.
#This is not the package name we want, we must therefore change it to
#`<packagename>`.

if [ $LIBPACK == true ]
then
    sed -i -r -e s/"$LIBPACKAGENAME"BROKEN/"$LIBPACKAGENAME"/g debian/control\
 | log
    echo "Library package renamed to $LIBPACKAGENAME." | tee -a $LOGFILE \
	$FULLLOGFILE
fi

#Then, we have to fill the .install and .dirs files with correct information.
#In order to do that, we use the variables LIBNAMES (which contains the
#libraries you want to include in the library package), HEADERNAMES (which 
#contains the name of the header files you want to include in the library 
#package), BINARYNAMES (which contains the names of the binaries you want 
#to include in the binary package) and INDNAMES (which contains the architecture
#independant files). If HEADERNAMES is empty, we remove the part
#of the control file that concern the package that will contains the header
#files. Therefore, that package will not be created.

if [ $LIBPACK == true ]
then
    rm -f debian/$LIBPACKAGENAME.install | log
    for library in $LIBNAMES
    do
	library=`echo $library | awk '{ gsub(":"," ",$0); print $0; }'`
	echo "$library" >>debian/$LIBPACKAGENAME.install
    done;

    if [ ! -z "$LIBNAMES" ] 
    then
	echo "Added libraries that will be included in \
debian/$LIBPACKAGENAME.install : $LIBNAMES." | tee -a $LOGFILE $FULLLOGFILE
    fi

    if [ ! -z "$HEADERNAMES" ]
    then
	rm -f debian/$LIBPACKAGENAME-dev.install | log
	for header in $HEADERNAMES
	do
	    header=`echo $header | awk '{ gsub(":"," ",$0); print $0; }'`
	    echo "$header" >> debian/$LIBPACKAGENAME-dev.install
	done;

	echo "Added headers that will be included in \
debian/$LIBPACKAGENAME-dev.install : $HEADERNAMES." | tee -a $LOGFILE \
	    $FULLLOGFILE
    else
	perl -0777 -pi -e "s/Package: $LIBPACKAGENAME-dev.+?\n\n//s" \
	    debian/control | log
    fi
fi

if [ $BINPACK == true ] 
then
    for binary in $BINARYNAMES
    do
	binary=`echo $binary | awk '{ gsub(":"," ",$0); print $0; }'`
	echo "$binary" >> debian/$BINPACKAGENAME.install
    done;
    echo "Added binaries that will be included in \
debian/$BINPACKAGENAME.install : $BINARYNAMES" | tee -a $LOGFILE $FULLLOGFILE

    for manpage in $MANPAGES
    do
	echo "$manpage" >> debian/$BINPACKAGENAME.manpages
    done
    echo "Added man pages that will be included in \
debian/$BINPACKAGENAME.manpages : $MANPAGES" | tee -a $LOGFILE $FULLLOGFILE
fi

if [ $INDPACK == true ]
then
    for indep in $INDNAMES
    do
	indep=`echo $indep | awk '{ gsub(":"," ",$0); print $0; }'`
	echo "$indep" >> debian/$INDPACKAGENAME.install
    done;
    echo "Added architecture independant files that will be included in \
debian/$INDPACKAGENAME.install : $INDNAMES." | tee -a $LOGFILE $FULLLOGFILE
fi

#If the user want to build library packages and a binary package, we have to
#tell the tool that will create them that there's a binary package in addition
#of the two library packages. This is due to the `-l` option used when the user
#wants to build both type of packages. This option creates a control file that
#contains information for library packages only.

if [ $LIBPACK == true ]
then 
    if [ $BINPACK == true ]
    then	
	env echo -e -n "\n" >> debian/control
	echo "Package: $BINPACKAGENAME" >> debian/control
	echo "Architecture: any" >> debian/control
	echo 'Depends: ${shlibs:Depends}, ${misc:Depends}' >>debian/control
	echo 'Description: <insert up to 60 chars description>' >>debian/control
	echo ' <insert long description, indented with spaces>' >>debian/control

	echo "Added binary package description to debian/control file." \
	    | tee -a $LOGFILE $FULLLOGFILE
    fi
    if [ $INDPACK == true ]
    then
	env echo -e -n "\n" >> debian/control
	echo "Package: $INDPACKAGENAME" >> debian/control
	echo "Architecture: all" >> debian/control
	echo 'Depends: ${misc:Depends}' >> debian/control
	echo "Description: <insert up to 60 chars description>" \
>> debian/control
	echo " <insert long description, indented with spaces>" \
>> debian/control

	echo "Added arch-independant package description to debian/control \
file." | tee -a $LOGFILE $FULLLOGFILE
    fi
elif [ $BINPACK == true ] && [ $INDPACK == true ] 
then
    env echo -e -n "\n" >> debian/control
    echo "Package: $INDPACKAGENAME" >> debian/control
    echo "Architecture: all" >> debian/control
    echo 'Depends: ${misc:Depends}' >> debian/control
    echo "Description: <insert up to 60 chars description>" >> debian/control
    echo " <insert long description, indented with spaces>" >> debian/control

    echo "Added arch-independant package description to debian/control \
file." | tee -a $LOGFILE $FULLLOGFILE
fi

#Now, we have to add the dependencies of the packages, in the control file.

if [ ! -z "$BINRUNDEPENDS" ]
then
    perl -0777 -pi -e 's/(Package: '"$BINPACKAGENAME"'.*?Depends:.+?)\n/$1, '"$BINRUNDEPENDS\n/s" debian/control  | log
    echo "Added binaries' runtime dependencies to debian/control :\
 $BINRUNDEPENDS." | tee -a $LOGFILE $FULLLOGFILE
fi

if [ ! -z "$LIBRUNDEPENDS" ]
then
    perl -0777 -pi -e 's/(Package: '"$LIBPACKAGENAME"'.*?Depends:.+?)\n/$1, '"$LIBRUNDEPENDS\n/s" debian/control  | log
    echo "Added libraries' runtime dependencies to debian/control :\
 $LIBRUNDEPENDS." | tee -a $LOGFILE $FULLLOGFILE
fi

if [ ! -z "$INDRUNDEPENDS" ]
then
    perl -0777 -pi -e 's/(Package: '"$INDPACKAGENAME"'.*?Depends:.+?)\n/$1, '"$INDRUNDEPENDS\n/s" debian/control  | log
    echo "Added arch-independant files' runtime dependencies to debian/control :\
$INDRUNDEPENDS." | tee -a $LOGFILE $FULLLOGFILE
fi

if [ ! -z "$BUILDDEPENDS" ]
then
    perl -pi -e 's/(Build-Depends:.+)$/$1, '"$BUILDDEPENDS/" debian/control\
 | log
    echo "Added build dependencies to debian/control : $BUILDDEPENDS." \
	| tee -a $LOGFILE $FULLLOGFILE
fi

#Then, if the user want to call the `configure` script of his project
#with special flags, we have to modify the _rules_ file in order to use them
#when _debuild_ will call it.

if [ -n "$CONFIGUREFLAGS" ]
then
    echo "override_dh_auto_configure:" >> debian/rules
    env echo -e "\tdh_auto_configure -- $CONFIGUREFLAGS\n" >> debian/rules
    echo "Added the following flags to configure execution : $CONFIGUREFLAGS." \
	| tee -a $LOGFILE $FULLLOGFILE
fi

#We give a list of the libraries we build to `debuild` so he can check links 
#between them and binaries (if any)

if [ ! -z "$LIBNAMES" ]
then
    libdir="-l"
    for lib in $LIBNAMES
    do
	l=`echo $lib | awk 'BEGIN {FS="::"} {print $1}' | grep -E -o ".+/"`
	libdir="$libdir$l:"
    done
    libdir=`echo $libdir | perl -ne 'chomp;chop;print $_'`
    echo "override_dh_shlibdeps:" >> debian/rules
    env echo -e "\tdh_shlibdeps $libdir\n" >> debian/rules
    echo "Added the following libraries for dh_shlibdeps : $libdir." \
	| tee -a $LOGFILE $FULLLOGFILE
fi

#We tell `debuild` to have a verbose output so we can have a complete log

env echo -e "\nexport DH_VERBOSE=1\n" >> debian/rules

#We tell debuild not to use `dh_auto_install` `dh_usrlocal` and because it
#makes errors when building multiple packages at the same time.

env echo -e "\noverride_dh_auto_install:" >> debian/rules
env echo -e "\t\n" >> debian/rules
env echo -e "\noverride_dh_usrlocal:" >> debian/rules
env echo -e "\t\n" >> debian/rules

#We skip tests to gain time
env echo -e "\noverride_dh_auto_test:" >> debian/rules
env echo -e "\t\n" >> debian/rules

#<a id='libsource'>Creation of the source package</a>
#----------------------------------------------------

#Now, we are building a source package that contains the source code 
#of your program. When debuild has created that package, it runs a program 
#called _lintian_, that checks if the package complies with the debian policy.
#The log of this run can be found in the file whose name matches the following
#pattern : &lt;packagename&gt;\_&lt;version&gt;\_source.build. Some of the
#errors detected by _lintian_ can be corrected automatically. This is why we've
#created a script called _correct\_lintian.pl_, that corrects some of thoses
#errors. 

if [ $quitbeforebuild -eq 0 ]; then
    echo "Building source package..." | tee -a $LOGFILE $FULLLOGFILE
    debuild -S -uc -us | log
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo "Source package building failed." | tee -a $LOGFILE $FULLLOGFILE
        exit 12
    fi
    echo "Source package successfully built." | tee -a $LOGFILE $FULLLOGFILE

    echo "Running correction to lintian errors..." | tee -a $LOGFILE $FULLLOGFILE
    $LINTIAN "$MAKEFILEDIR/../$PACKNAME""-1_source.build" | log
    echo "Lintian errors corrected." | tee -a $LOGFILE $FULLLOGFILE
   
#<a id='libbuild'>Building the package</a>
#-----------------------------------------

#Now, we can finally build the package. _debuild_ does pretty much all the work.
#-us and -uc options means that we don't sign the packages.

    rm -f "../$LIBPACKAGENAME""_$VERSION-1.debian.tar.gz" | log
    rm -f "../$BINPACKAGENAME""_$VERSION-1.debian.tar.gz" | log
    rm -f "../$INDPACKAGENAME""_$VERSION-1.debian.tar.gz" | log
    rm -f ../*.build ../*.changes | log
    echo "Building debian packages..." | tee -a $LOGFILE $FULLLOGFILE
    debuild -us -uc | log
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        echo "Package building failed." | tee -a $LOGFILE $FULLLOGFILE
        exit 13
    fi
    echo "Debian packages successfully built." | tee -a $LOGFILE $FULLLOGFILE
fi
    
#We now have to remove the debian directory, the tarballs, and some files
#created by _debuild_.

if [ $leaveunclean -eq 0 ]; then
    echo "Cleaning directory..." | tee -a $LOGFILE $FULLLOGFILE
    rm -rf debian/ | log
    cd $MAKEFILEDIR/.. | log
    rm -f "$TARBALL" | log
    rm -f "$LIBPACKAGENAME""_$VERSION-1.debian.tar.gz" | log
    rm -f "$BINPACKAGENAME""_$VERSION-1.debian.tar.gz" | log
    rm -f "$INDPACKAGENAME""_$VERSION-1.debian.tar.gz" | log
    rm -f *.build *.changes | log
fi
    
#<a id='afterbuild'>Running After build operations</a>
#-------------------------------------------------------

#We execute commands specified in the configuration file in the field AFTERBUILD

cd $MAKEFILEDIR | log
echo "Executing after build commands..." | tee -a $LOGFILE $FULLLOGFILE
IFS=';' read -a commands <<< "$AFTERBUILD"
for cmd in "${commands[@]}"
do
    echo " > $cmd" | tee -a $LOGFILE $FULLLOGFILE
    eval "$cmd" | log
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
	cmdname=`echo $cmd | cut -d' ' -f1`
	echo $cmdname exited with a ${PIPESTATUS[0]} status
	exit 14
    fi
done

echo "After build commands executed." | tee -a $LOGFILE $FULLLOGFILE


if [ $quitbeforebuild -eq 1 ]; then
    echo "You can now edit the configuration files located in \
$MAKEFILEDIR/debian and build your packages using 'debuild'. Check debuild's \
manpage for more information." | tee -a $LOGFILE $FULLLOGFILE
else
    env echo -e "\nYou can now find your debian packages and logs in $LOGDIR. \
buildeb.log is the same as the previous output, and buildeb_full.log is a \
complete output of every program called by buildeb (compilation, package \
building operations, etc...)." | tee -a $LOGFILE $FULLLOGFILE
fi
